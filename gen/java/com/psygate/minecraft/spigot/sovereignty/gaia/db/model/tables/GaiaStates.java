/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.gaia.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.gaia.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.gaia.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.gaia.db.model.tables.records.GaiaStatesRecord;
import com.psygate.minecraft.spigot.sovereignty.gaia.plants.PlantState;
import com.psygate.minecraft.spigot.sovereignty.gaia.util.db.PlantStateConverter;
import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GaiaStates extends TableImpl<GaiaStatesRecord> {

	private static final long serialVersionUID = 221182704;

	/**
	 * The reference instance of <code>nucleus.gaia_states</code>
	 */
	public static final GaiaStates GAIA_STATES = new GaiaStates();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<GaiaStatesRecord> getRecordType() {
		return GaiaStatesRecord.class;
	}

	/**
	 * The column <code>nucleus.gaia_states.id</code>.
	 */
	public final TableField<GaiaStatesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.gaia_states.x</code>.
	 */
	public final TableField<GaiaStatesRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.gaia_states.y</code>.
	 */
	public final TableField<GaiaStatesRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.gaia_states.z</code>.
	 */
	public final TableField<GaiaStatesRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.gaia_states.world_uuid</code>.
	 */
	public final TableField<GaiaStatesRecord, UUID> WORLD_UUID = createField("world_uuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.gaia_states.plant_state</code>.
	 */
	public final TableField<GaiaStatesRecord, PlantState> PLANT_STATE = createField("plant_state", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "", new PlantStateConverter());

	/**
	 * The column <code>nucleus.gaia_states.transition_time</code>.
	 */
	public final TableField<GaiaStatesRecord, Timestamp> TRANSITION_TIME = createField("transition_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>nucleus.gaia_states.planted_time</code>.
	 */
	public final TableField<GaiaStatesRecord, Timestamp> PLANTED_TIME = createField("planted_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>nucleus.gaia_states.creator</code>.
	 */
	public final TableField<GaiaStatesRecord, UUID> CREATOR = createField("creator", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.gaia_states.plant</code>.
	 */
	public final TableField<GaiaStatesRecord, String> PLANT = createField("plant", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

	/**
	 * The column <code>nucleus.gaia_states.growth_count</code>.
	 */
	public final TableField<GaiaStatesRecord, Integer> GROWTH_COUNT = createField("growth_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>nucleus.gaia_states</code> table reference
	 */
	public GaiaStates() {
		this("gaia_states", null);
	}

	/**
	 * Create an aliased <code>nucleus.gaia_states</code> table reference
	 */
	public GaiaStates(String alias) {
		this(alias, GAIA_STATES);
	}

	private GaiaStates(String alias, Table<GaiaStatesRecord> aliased) {
		this(alias, aliased, null);
	}

	private GaiaStates(String alias, Table<GaiaStatesRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<GaiaStatesRecord, Long> getIdentity() {
		return Keys.IDENTITY_GAIA_STATES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<GaiaStatesRecord> getPrimaryKey() {
		return Keys.KEY_GAIA_STATES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<GaiaStatesRecord>> getKeys() {
		return Arrays.<UniqueKey<GaiaStatesRecord>>asList(Keys.KEY_GAIA_STATES_PRIMARY, Keys.KEY_GAIA_STATES_X);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public GaiaStates as(String alias) {
		return new GaiaStates(alias, this);
	}

	/**
	 * Rename this table
	 */
	public GaiaStates rename(String name) {
		return new GaiaStates(name, null);
	}
}
